'use client'

import { createContext, useContext, useState, useEffect, ReactNode } from 'react'
import type { SystemConfig, ModuleConfig, ThemeConfig } from '@/types/system'
import { DEFAULT_THEMES, applyTheme } from '@/lib/themes'

interface SystemContextType {
  config: SystemConfig
  updateConfig: (config: Partial<SystemConfig>) => void
  addModule: (module: ModuleConfig) => void
  removeModule: (moduleId: string) => void
  toggleModule: (moduleId: string) => void
  updateModule: (moduleId: string, updates: Partial<ModuleConfig>) => void
  // Theme functions
  setTheme: (themeId: string) => void
  addCustomTheme: (theme: ThemeConfig) => void
  removeCustomTheme: (themeId: string) => void
  updateCustomTheme: (themeId: string, updates: Partial<ThemeConfig>) => void
  getCurrentTheme: () => ThemeConfig | undefined
  isLoading: boolean
}

const defaultConfig: SystemConfig = {
  modules: [
    { id: 'dashboard', name: 'Dashboard', path: '/', icon: 'Home', description: 'Overview of system metrics', enabled: true, order: 0 },
    { id: 'materials', name: 'Materials', path: '/materials', icon: 'Package', description: 'Manage inventory materials', enabled: true, order: 1 },
    { id: 'batches', name: 'Batches', path: '/batches', icon: 'Layers', description: 'Track material batches', enabled: true, order: 2 },
    { id: 'transactions', name: 'Transactions', path: '/transactions', icon: 'ArrowRightLeft', description: 'Monitor transactions', enabled: true, order: 3 },
    { id: 'customers', name: 'Customers', path: '/customers', icon: 'Users', description: 'Customer relationship management', enabled: true, order: 4, settings: { tableId: 'customers', template: 'crud', autoGenerated: true } },
    { id: 'production', name: 'Production', path: '/production', icon: 'Factory', description: 'Production management', enabled: true, order: 5 },
    { id: 'designs', name: 'Designs', path: '/designs', icon: 'Palette', description: 'Product designs', enabled: true, order: 6 },
    { id: 'reports', name: 'Reports', path: '/reports', icon: 'BarChart3', description: 'Analytics and reports', enabled: true, order: 7 },
    { id: 'diagnostics', name: 'Diagnostics', path: '/diagnostics', icon: 'Eye', description: 'System health diagnostics', enabled: true, order: 8 },
  ],
  theme: {
    current: 'default',
    themes: DEFAULT_THEMES,
    customThemes: []
  },
  layout: {
    sidebarCollapsed: false,
    headerHeight: 64
  },
  features: {
    dynamicModules: true,
    visualEditor: true,
    adminPanel: true,
    customThemes: true
  }
}

const SystemContext = createContext<SystemContextType | undefined>(undefined)

export function SystemProvider({ children }: { children: ReactNode }) {
  const [config, setConfig] = useState<SystemConfig>(defaultConfig)
  const [isLoading, setIsLoading] = useState(false)

  useEffect(() => {
    // Load config from localStorage or API
    const savedConfig = localStorage.getItem('erp-system-config')
    if (savedConfig) {
      try {
        const parsedConfig = JSON.parse(savedConfig)
        setConfig(parsedConfig)
        // Apply the current theme after a brief delay to ensure DOM is ready
        setTimeout(() => {
          const currentTheme = getCurrentTheme(parsedConfig)
          if (currentTheme) {
            applyTheme(currentTheme)
          }
        }, 100)
      } catch (error) {
        console.error('Failed to parse saved config:', error)
        // Apply default theme on error
        setTimeout(() => {
          const defaultTheme = DEFAULT_THEMES.find(t => t.id === 'default')
          if (defaultTheme) {
            applyTheme(defaultTheme)
          }
        }, 100)
      }
    } else {
      // Apply default theme
      setTimeout(() => {
        const defaultTheme = DEFAULT_THEMES.find(t => t.id === 'default')
        if (defaultTheme) {
          applyTheme(defaultTheme)
        }
      }, 100)
    }
  }, [])

  const getCurrentTheme = (configToUse?: SystemConfig): ThemeConfig | undefined => {
    const currentConfig = configToUse || config
    const allThemes = [...currentConfig.theme.themes, ...currentConfig.theme.customThemes]
    return allThemes.find(theme => theme.id === currentConfig.theme.current)
  }

  const saveConfig = (newConfig: SystemConfig) => {
    localStorage.setItem('erp-system-config', JSON.stringify(newConfig))
    setConfig(newConfig)
  }

  const updateConfig = (updates: Partial<SystemConfig>) => {
    const newConfig = { ...config, ...updates }
    saveConfig(newConfig)
  }

  const addModule = (module: ModuleConfig) => {
    const newModules = [...config.modules, module]
    updateConfig({ modules: newModules })
  }

  const removeModule = (moduleId: string) => {
    const newModules = config.modules.filter(m => m.id !== moduleId)
    updateConfig({ modules: newModules })
  }

  const toggleModule = (moduleId: string) => {
    const newModules = config.modules.map(m => 
      m.id === moduleId ? { ...m, enabled: !m.enabled } : m
    )
    updateConfig({ modules: newModules })
  }

  const updateModule = (moduleId: string, updates: Partial<ModuleConfig>) => {
    const newModules = config.modules.map(m => 
      m.id === moduleId ? { ...m, ...updates } : m
    )
    updateConfig({ modules: newModules })
  }

  const setTheme = (themeId: string) => {
    const allThemes = [...config.theme.themes, ...config.theme.customThemes]
    const theme = allThemes.find(t => t.id === themeId)
    if (theme) {
      applyTheme(theme)
      updateConfig({
        theme: {
          ...config.theme,
          current: themeId
        }
      })
    }
  }

  const addCustomTheme = (theme: ThemeConfig) => {
    const newCustomThemes = [...config.theme.customThemes, theme]
    updateConfig({
      theme: {
        ...config.theme,
        customThemes: newCustomThemes
      }
    })
  }

  const removeCustomTheme = (themeId: string) => {
    const newCustomThemes = config.theme.customThemes.filter(t => t.id !== themeId)
    updateConfig({
      theme: {
        ...config.theme,
        customThemes: newCustomThemes
      }
    })
  }

  const updateCustomTheme = (themeId: string, updates: Partial<ThemeConfig>) => {
    const newCustomThemes = config.theme.customThemes.map(t => 
      t.id === themeId ? { ...t, ...updates } : t
    )
    updateConfig({
      theme: {
        ...config.theme,
        customThemes: newCustomThemes
      }
    })
  }

  return (
    <SystemContext.Provider value={{
      config,
      updateConfig,
      addModule,
      removeModule,
      toggleModule,
      updateModule,
      setTheme,
      addCustomTheme,
      removeCustomTheme,
      updateCustomTheme,
      getCurrentTheme,
      isLoading
    }}>
      {children}
    </SystemContext.Provider>
  )
}

export function useSystem() {
  const context = useContext(SystemContext)
  if (context === undefined) {
    throw new Error('useSystem must be used within a SystemProvider')
  }
  return context
}
